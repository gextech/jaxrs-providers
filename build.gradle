import java.text.SimpleDateFormat

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
  }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version = project.version
group = project.group

sourceCompatibility = project.javaVersion
targetCompatibility = project.javaVersion

repositories {
  jcenter()
  maven {
    url 'http://dl.bintray.com/gextech/oss'
  }
}

dependencies {
  //compile 'org.projectlombok:lombok:1.14.8'
  compile 'gex.commons:exceptions:0.1.0'
  compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
  compile ('org.springframework:spring-context:4.1.3.RELEASE') {
    //exclude module: 'commons-logging'
  }
  compile 'org.slf4j:slf4j-api:1.7.9'

  testCompile "org.codehaus.groovy:groovy-all:${project.groovyVersion}"
  testCompile "org.spockframework:spock-core:${project.spockVersion}"
  testCompile 'cglib:cglib-nodep:2.2.2'
  testCompile 'org.objenesis:objenesis:1.2'
  testCompile 'org.slf4j:slf4j-log4j12:1.7.9'
}

Date buildTimeAndDate = new Date()
ext {
  buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
  buildTime = new SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

def jarManifestAttributes = [
  'Built-By'  : System.properties['user.name'],
  'Created-By': System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ' ' + System.getProperty("java.vm.version") + ")",
  'Build-Date': buildDate,
  'Build-Time': buildTime]

jar {
  manifest {
    attributes(jarManifestAttributes)
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar

      pom.withXml {
        def root = asNode()
        root.appendNode('name', project.name)
        root.appendNode('description', project.description)
        root.appendNode('url', 'https://github.com/gextech/jaxrs-providers')
        root.appendNode('inceptionYear', '2014')

        def scm = root.appendNode('scm')
        scm.appendNode('url', 'https://github.com/gextech/jaxrs-providers')
        scm.appendNode('connection', 'scm:https://domix@github.com/gextech/jaxrs-providers.git')
        scm.appendNode('developerConnection', 'scm:git@github.com:gextech/jaxrs-providers.git')

        def license = root.appendNode('licenses').appendNode('license')
        license.appendNode('name', 'The Apache Software License, Version 2.0')
        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        license.appendNode('distribution', 'repo')

        def developers = root.appendNode('developers')
        def domix = developers.appendNode('developer')
        domix.appendNode('id', 'domix')
        domix.appendNode('name', 'Domingo Suarez Torres')
        domix.appendNode('email', 'domingo.suarez@gmail.com')
      }
    }
  }
}

bintray {
  user = project.hasProperty('bintray_user') ? bintray_user : ''
  key = project.hasProperty('bintray_api_key') ? bintray_api_key : ''

  publications = ['mavenJava']
  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'oss'
    userOrg = 'gextech'
    name = project.name
    desc = project.description
    websiteUrl = 'https://github.com/gextech/jaxrs-providers'
    issueTrackerUrl = 'https://github.com/gextech/jaxrs-providers/issues'
    vcsUrl = 'https://github.com/gextech/jaxrs-providers.git'
    licenses = ['Apache-2.0']
    labels = ['gex', 'serling', 'jax-rs']
    publicDownloadNumbers = true
    attributes = ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee']
    //Optional version descriptor
    version {
      name = project.version
      desc = project.description
      mavenCentralSync {
        sync = false
        user = ''
        password = ''
        close = '1'
      }
    }
  }
}